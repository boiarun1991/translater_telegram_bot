import random
from aiogram import Bot, Dispatcher, F
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from bot_functions import (engine, session, interface_choice, check_result, DictEditor,
                           WorkingForDictionary, CustomKeyboard, bot_token)
from models import create_tables, Users, Lexicon, User_words

bot = Bot(token=bot_token)
dp = Dispatcher()

create_tables(engine)
variable_storage = MemoryStorage()

print('Start telegram bot...')


class FSMEditDict(StatesGroup):
    action_for_dict = State()
    add_new_word = State()
    add_eng_word = State()
    add_rus_word = State()
    del_eng_word = State()
    del_rus_word = State()
    confirm_del_word = State()


@dp.callback_query(F.data.in_({'edit_dict'}))
async def edit_dict(callback: CallbackQuery, state: FSMContext):
    await state.set_state(FSMEditDict.action_for_dict)
    LEXICON: dict[str, str] = {
        'add_new_word': 'üìù –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ',
        'del_word': '‚ÅâÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ',
        'exit': 'üö™ –í—ã—Ö–æ–¥'}
    await callback.message.answer(
        text='–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å üë∑‚Äç?',
        reply_markup=CustomKeyboard.create_inline_kb
        (1, LEXICON, 'add_new_word', 'del_word', 'exit'))


@dp.callback_query(F.data.in_({'add_new_word'}))
async def add_new_word(callback: CallbackQuery, state: FSMContext):
    await state.set_state(FSMEditDict.add_eng_word)
    await callback.message.answer(
        text='–í–≤–µ–¥–∏—Ç–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ: üá¨üáß',
        reply_markup=ReplyKeyboardRemove())


@dp.message(FSMEditDict.add_eng_word)
async def add_eng_word(message: Message, state: FSMContext):
    await state.update_data(eng_word=message.text.lower())
    await state.set_state(FSMEditDict.add_rus_word)
    await message.answer(
        text='–í–≤–µ–¥–∏—Ç–µ —Ä—É—Å—Å–∫–æ–µ —Å–ª–æ–≤–æ: üá∑üá∫')


@dp.message(FSMEditDict.add_rus_word)
async def add_rus_word(message: Message, state: FSMContext):
    await state.update_data(rus_word=message.text.lower())
    editor = DictEditor()
    LEXICON: dict[str, str] = {
        'add_new_word': 'üìù –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ',
        'del_word': '‚ÅâÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ',
        'exit': 'üö™ –í—ã—Ö–æ–¥'}
    new_word_in_dict = await state.get_data()
    ru_word = new_word_in_dict['rus_word']
    eng_word = new_word_in_dict['eng_word']
    insert_new_word = editor.add_new_word(eng_word=eng_word, rus_word=ru_word, id_user=str(message.from_user.id))
    await message.answer(
        text=f'{insert_new_word}\n\n'
             f'–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –µ—â—ë? üë∑‚Äç',
        reply_markup=CustomKeyboard.create_inline_kb(1, LEXICON, 'add_new_word', 'del_word', 'exit'))

    print(await state.get_data())
    await state.clear()


@dp.callback_query(F.data.in_({'del_word'}))
async def del_word(callback: CallbackQuery, state: FSMContext):
    await state.set_state(FSMEditDict.del_eng_word)
    await callback.message.answer(
        text='–í–≤–µ–¥–∏—Ç–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ: üá¨üáß',
        reply_markup=ReplyKeyboardRemove())


@dp.message(FSMEditDict.del_eng_word)
async def del_eng_word(message: Message, state: FSMContext):
    await state.update_data(eng_word=message.text.lower())
    await state.set_state(FSMEditDict.del_rus_word)
    await message.answer(
        text='–í–≤–µ–¥–∏—Ç–µ —Ä—É—Å—Å–∫–æ–µ —Å–ª–æ–≤–æ: üá∑üá∫')


@dp.message(FSMEditDict.del_rus_word)
async def del_rus_word(message: Message, state: FSMContext):
    await state.update_data(rus_word=message.text.lower())
    editor = DictEditor()
    LEXICON: dict[str, str] = {
        'add_new_word': 'üìù –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ',
        'del_word': '‚ÅâÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ',
        'exit': 'üö™ –í—ã—Ö–æ–¥'}
    del_word_in_dict = await state.get_data()
    ru_word = del_word_in_dict['rus_word']
    eng_word = del_word_in_dict['eng_word']
    delete_word = editor.delete_word(eng_word=eng_word, rus_word=ru_word, id_user=str(message.from_user.id))
    await message.answer(
        text=f'{delete_word}\n\n'
             f'–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –µ—â—ë? üë∑',
        reply_markup=CustomKeyboard.create_inline_kb(1, LEXICON, 'add_new_word', 'del_word', 'exit'))


@dp.callback_query(F.data.in_({'begin_learn_new'}))
async def learn_new_words(callback: CallbackQuery, state: FSMContext):
    rand_words = WorkingForDictionary.random_of_lexicon()
    right_choice = random.choice(rand_words)
    await state.set_state({'status': 'learn_new_words', 'right_choice': right_choice, 'rand_words': rand_words})
    await interface_choice(rand_words, right_choice, callback)


@dp.callback_query(F.data.in_({'repeat_words'}))
async def repeat_words(callback: CallbackQuery, state: FSMContext):
    rand_words = WorkingForDictionary.random_of_user_words(callback.from_user.id)
    right_choice = random.choice(rand_words)
    await state.set_state({'status': 'repeat_words', 'right_choice': right_choice, 'rand_words': rand_words})
    await interface_choice(rand_words, right_choice, callback)


@dp.callback_query(F.data.in_({'next'}))
async def next_question(callback: CallbackQuery, state: FSMContext):
    status = await state.get_state()
    rand_words = WorkingForDictionary.random_of_lexicon()
    right_choice = random.choice(rand_words)
    await interface_choice(rand_words, right_choice, callback)
    await state.set_state({'rand_words': rand_words, 'right_choice': right_choice, 'status': status.get('status')})


@dp.callback_query(F.data.in_({'but_1', 'but_2', 'but_3', 'but_4'}))
async def user_choice(callback: CallbackQuery, state: FSMContext):
    get_info = await state.get_state()
    await check_result(get_info['rand_words'],
                       get_info['right_choice'],
                       callback, get_info['status'])


@dp.callback_query(F.data.in_({'exit'}))
async def choice(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer(
        text='–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞, –ß–µ–º –∑–∞–π–º—ë–º—Å—è —Ç–µ–ø–µ—Ä—å?üë∑',
        reply_markup=CustomKeyboard.start_keyboard()

    )


@dp.callback_query(F.data.in_({'download_dict'}))
async def download_dict(callback: CallbackQuery):
    await callback.message.answer(
        text='–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ª–æ–≤–∞—Ä—è...‚è≥',
    )
    await callback.message.answer(
        text=WorkingForDictionary.filing_dict(),
        reply_markup=CustomKeyboard.start_keyboard()
    )


@dp.message(CommandStart())
async def command_start(message: Message):
    keyboard = CustomKeyboard.start_keyboard()
    with session as sn:
        users_in_base = sn.query(Users.id_telegram)
        check_lexicon_dict = sn.query(Lexicon).count()
        check_user_words = sn.query(User_words).count()
        try:
            new_user = Users(id_telegram=message.from_user.id, name=message.chat.username)
            sn.add(new_user)
            sn.commit()
            print(f'User added.\nUsername: {message.chat.username}\nUser ID: {message.from_user.id}')
        except:
            print(f'This user already exists.\nUsername: {message.chat.username}\nUser ID: {message.from_user.id}')
    if check_lexicon_dict == 0:
        await message.answer(
            text='–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!üëã\n'
                 '–Ø ü§ñ –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤ üá¨üáß\n'
                 '–Ø –±—É–¥—É –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ–¥–Ω–æ —Å–ª–æ–≤–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ üá∑üá∫,\n'
                 '–ò –¥–∞–≤–∞—Ç—å —á–µ—Ç—ã—Ä–µ üî¢ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º,\n'
                 '–í–∞–º –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç ‚úÖ.\n\n'
                 '–ü–æ —Ö–æ–¥—É –∏–∑—É—á–µ–Ω–∏—è –≤–∞–º –±—É–¥–µ—Ç –æ—Ç–∫—Ä—ã—Ç —Ä–µ–∂–∏–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –∏–∑—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ üîÅ.\n\n'
                 '–Ø –º–æ–≥—É –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –∏–∑ 2000 –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤üë®‚Äçüíª.\n\n'
                 '–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ —Å–ª–æ–≤–∞—Ä—å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ‚úçÔ∏è.\n\n'
                 '–ß—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å, –Ω–∞–∂–º–∏—Ç–µ "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å üìö"\n'
                 '–ò–ª–∏ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ–≤–∞—Ä—å ‚úçÔ∏è" –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–ª–æ–≤\n\n',
            reply_markup=keyboard)
    elif check_user_words > 50:
        await message.answer(
            text='–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üëã\n'
                 '–Ø ü§ñ –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤ üá¨üáß\n'
                 '–Ø –±—É–¥—É –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ–¥–Ω–æ —Å–ª–æ–≤–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ üá∑üá∫,\n'
                 '–ò –¥–∞–≤–∞—Ç—å —á–µ—Ç—ã—Ä–µ üî¢ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º,\n'
                 '–í–∞–º –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç ‚úÖ.\n\n'
                 '–ü–æ —Ö–æ–¥—É –∏–∑—É—á–µ–Ω–∏—è –≤–∞–º –±—É–¥–µ—Ç –æ—Ç–∫—Ä—ã—Ç —Ä–µ–∂–∏–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –∏–∑—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ üîÅ.\n\n'
                 '–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ —Å–ª–æ–≤–∞—Ä—å ‚úçÔ∏è\n\n'
                 '–Ø –∑–∞–º–µ—Ç–∏–ª, —á—Ç–æ –≤—ã —É–∂–µ –∏–∑—É—á–∏–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–æ–≤—ã—Ö —Å–ª–æ–≤,\n'
                 '–í–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω —Ä–µ–∂–∏–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –∏–∑—É—á–µ–Ω–Ω–æ–≥–æ üîÅ, —É–¥–∞—á–∏!\n\n'
                 '–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏–∑—É—á–∏—Ç—å –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞, –Ω–∞–∂–º–∏—Ç–µ "–ù–∞—á–∞—Ç—å –∏–∑—É—á–µ–Ω–∏–µ üë®‚Äçüè´",\n'
                 '–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∏–∑—É—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞, –Ω–∞–∂–º–∏—Ç–µ "–ü–æ–≤—Ç–æ—Ä—è–µ–º –∏–∑—É—á–µ–Ω–Ω–æ–µ üîÅ",\n'
                 '–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ–≤–∞—Ä—å ‚úçÔ∏è" –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–ª–æ–≤\n\n',
            reply_markup=keyboard)

    else:
        await message.answer(
            text='–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üëã\n'
                 '–Ø ü§ñ –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤ üá¨üáß\n'
                 '–Ø –±—É–¥—É –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ–¥–Ω–æ —Å–ª–æ–≤–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ üá∑üá∫,\n'
                 '–ò –¥–∞–≤–∞—Ç—å —á–µ—Ç—ã—Ä–µ üî¢ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º,\n'
                 '–í–∞–º –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç ‚úÖ.\n\n'
                 '–ü–æ —Ö–æ–¥—É –∏–∑—É—á–µ–Ω–∏—è –≤–∞–º –±—É–¥–µ—Ç –æ—Ç–∫—Ä—ã—Ç —Ä–µ–∂–∏–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –∏–∑—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ üîÅ.\n\n'
                 '–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ —Å–ª–æ–≤–∞—Ä—å ‚úçÔ∏è\n\n'
                 '–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏–∑—É—á–∏—Ç—å –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞, –Ω–∞–∂–º–∏—Ç–µ "–ù–∞—á–∞—Ç—å –∏–∑—É—á–µ–Ω–∏–µ üë®‚Äçüè´"\n'
                 '–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ–≤–∞—Ä—å ‚úçÔ∏è" –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–ª–æ–≤\n\n',
            reply_markup=keyboard)


if __name__ == '__main__':
    dp.run_polling(bot)
